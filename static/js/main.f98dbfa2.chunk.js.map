{"version":3,"sources":["ActionProvider.js","MessageParser.js","components/LinkList/LinkList.jsx","components/LearningOptions/LearningOptions.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","handleLiveChat","message","widget","updateChatbotState","handleHIVPrEPList","handleFAQList","this","setState","prevState","messages","MessageParser","actionProvider","lowerCaseMessage","toLowerCase","includes","greet","LinkList","props","linkMarkup","options","map","link","className","href","url","target","rel","text","id","LearningOptions","optionsMarkup","handler","option","onClick","config","botName","initialMessages","widgets","widgetName","widgetFunc","App","messageParser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f98dbfa2.chunk.js","sourcesContent":["class ActionProvider {\n    constructor(createChatBotMessage, setStateFunc) {\n      this.createChatBotMessage = createChatBotMessage;\n      this.setState = setStateFunc;\n    }\n\n    handleLiveChat = () => {\n      const message = this.createChatBotMessage(\n        \"Please click the button below and a JTCHS medical staff member will be with you shortly...\",\n        {\n          widget: \"LiveChatLink\",\n        }\n      );\n  \n      this.updateChatbotState(message);\n    };\n  \n    handleHIVPrEPList = () => {\n      const message = this.createChatBotMessage(\n        \"Fantastic, I've got the following resources for you on the topic of HIV PrEP:\",\n        {\n          widget: \"hivprepLinks\",\n        }\n      );\n  \n      this.updateChatbotState(message);\n    };\n\n    handleFAQList = () => {\n        const message = this.createChatBotMessage(\n          \"Fantastic, I've got the following resources for you on the topic of FAQs:\",\n          {\n            widget: \"faqLinks\",\n          }\n        );\n    \n        this.updateChatbotState(message);\n      };\n  \n    updateChatbotState(message) {\n      // NOTICE: This function is set in the constructor, and is passed in from the top level Chatbot component. The setState function here actually manipulates the top level state of the Chatbot, so it's important that we make sure that we preserve the previous state.\n  \n      this.setState((prevState) => ({\n        ...prevState,\n        messages: [...prevState.messages, message],\n      }));\n    }\n  }\n  \n  export default ActionProvider;","class MessageParser {\n    constructor(actionProvider) {\n      this.actionProvider = actionProvider;\n    }\n  \n    parse(message) {\n      const lowerCaseMessage = message.toLowerCase();\n  \n      if (lowerCaseMessage.includes(\"hello\")) {\n        this.actionProvider.greet();\n      }\n  \n      if (lowerCaseMessage.includes(\"hiv prep\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"prep\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"what is prep\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"whats prep\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"What is prep\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"What is prep?\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"What is PrEP?\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"PrEP\")) {\n        this.actionProvider.handleHIVPrEPList();\n      }\n\n      if (lowerCaseMessage.includes(\"HIV\")) {\n        this.actionProvider.handleHIVPrEPList();\n\n        \n      }\n\n      if (lowerCaseMessage.includes(\"faq\")) {\n        this.actionProvider.handleFAQList();\n\n        \n      }\n\n      if (lowerCaseMessage.includes(\"FAQ\")) {\n        this.actionProvider.handleFAQList();\n\n        \n      }\n\n      if (lowerCaseMessage.includes(\"faqs\")) {\n        this.actionProvider.handleFAQList();\n\n        \n      }\n\n      if (lowerCaseMessage.includes(\"FAQs\")) {\n        this.actionProvider.handleFAQList();\n\n        \n      }\n\n      if (lowerCaseMessage.includes(\"Faqs\")) {\n        this.actionProvider.handleFAQList();\n\n      \n      \n      }\n\n      if (lowerCaseMessage.includes(\"more help\")) {\n        this.actionProvider.handleLiveChat();\n\n      \n      \n      }\n\n      if (lowerCaseMessage.includes(\"help\")) {\n        this.actionProvider.handleLiveChat();\n\n      \n      \n      }\n    }\n  }\n  \n  export default MessageParser;","import React from \"react\";\n\nimport \"./LinkList.css\";\n\nconst LinkList = (props) => {\n    const linkMarkup = props.options.map((link) => (\n      <li key={link.id} className=\"link-list-item\">\n        <a\n          href={link.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"link-list-item-url\"\n        >\n          {link.text}\n        </a>\n      </li>\n    ));\n  \n    return <ul className=\"link-list\">{linkMarkup}</ul>;\n  };\n  \n  export default LinkList;","import React from \"react\";\n\nimport \"./LearningOptions.css\";\n\nconst LearningOptions = (props) => {\n  const options = [\n    {\n      text: \"PrEP\",\n      handler: props.actionProvider.handleHIVPrEPList,\n      id: 1,\n    },\n    \n    { text: \"PrEP FAQs\",\n    handler: props.actionProvider.handleFAQList,\n      id: 2,\n    },\n\n    { text: \"Live Chat (availible between 10AM & 4PM Eastern Time (ET) \",\n    handler: props.actionProvider.handleLiveChat,\n      id: 3,\n    },\n    /*{ text: \"APIs\", handler: () => {}, id: 3 },\n    { text: \"Security\", handler: () => {}, id: 4 },\n    { text: \"Interview prep\", handler: () => {}, id: 5 },\n    */\n  ];\n\n  const optionsMarkup = options.map((option) => (\n    <button\n      className=\"learning-option-button\"\n      key={option.id}\n      onClick={option.handler}\n    >\n      {option.text}\n    </button>\n  ));\n\n  return <div className=\"learning-options-container\">{optionsMarkup}</div>;\n};\n\nexport default LearningOptions;","import React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\n\nimport LinkList from \"./components/LinkList/LinkList\";\nimport LearningOptions from \"./components/LearningOptions/LearningOptions\";\n\nconst config = {botName: \"PrEPLearningBot\",\ninitialMessages: [\n    createChatBotMessage(\"Hi, I'm here to help. What do you want to \t\tlearn?\", {\n      widget: \"learningOptions\",\n    }),\n  ],\n widgets: [\n    {\n      widgetName: \"learningOptions\",\n      widgetFunc: (props) => <LearningOptions {...props} />,\n    },\n    {\n      widgetName: \"hivprepLinks\",\n      widgetFunc: (props) => <LinkList {...props} />,\n    },{\n        widgetName: \"hivprepLinks\",\n        widgetFunc: (props) => <LinkList {...props} />,\n        props: {\n          options: [\n            {\n              text: \"What is PrEP\",\n              url:\n                \"https://www.cdc.gov/hiv/clinicians/prevention/prep.html\",\n              id: 1,\n            },\n            {\n              text: \"PrEP FAQs\",\n              url:\n                \"https://www.health.ny.gov/diseases/aids/general/prep/faqs.htm\",\n              id: 2,\n            },\n            {\n              text: \"PrEP Guidelines & Resources\",\n              url: \"https://nccc.ucsf.edu/clinical-resources/prep-guidelines-and-resources/\",\n              id: 3,\n            },\n          ],\n        },\n      },\n\n      {\n        widgetName: \"faqLinks\",\n        widgetFunc: (props) => <LinkList {...props} />,\n      },{\n          widgetName: \"faqLinks\",\n          widgetFunc: (props) => <LinkList {...props} />,\n          props: {\n            options: [\n              \n              {\n                text: \"PrEP FAQs\",\n                url:\n                  \"https://www.health.ny.gov/diseases/aids/general/prep/faqs.htm\",\n                id: 1,\n              },\n              {\n                text: \"PrEP Questions\",\n                url: \"https://prepfacts.org/prep/the-questions/\",\n                id: 2,\n              },\n            ],\n          },\n        },\n\n        {\n          widgetName: \"LiveChatLink\",\n          widgetFunc: (props) => <LinkList {...props} />,\n        },{\n            widgetName: \"LiveChatLink\",\n            widgetFunc: (props) => <LinkList {...props} />,\n            props: {\n              options: [\n                {\n                  text: \"PrEP Live Chat\",\n                  url:\n                    \"https://prep-chatbot-64c7e.web.app/\",\n                  id: 1,\n                },\n               \n              ],\n            },\n          },\n    ],\n  };\n  \n  export default config;\n","import React from 'react';\nimport Chatbot from 'react-chatbot-kit'\nimport './App.css';\n\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser';\nimport config from './config';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Chatbot config={config} actionProvider={ActionProvider} \t    messageParser={MessageParser} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}